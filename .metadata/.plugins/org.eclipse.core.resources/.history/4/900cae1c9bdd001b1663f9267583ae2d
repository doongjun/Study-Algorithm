package baekjoon;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

//DFSì™€ BFS
public class BFSandDFS {
	static int N;
	static int M;
	static int V;
	static int[][] board;
	static void bfs(int node) {
		boolean[] visited = new boolean[N];
		Queue<Integer> queue = new LinkedList<>();
		
		visited[node] = true;
		queue.add(node);
		
		while(!queue.isEmpty()) {
			int cur = queue.remove();
			System.out.println(cur);
			for(int next = 0; next<N; next++) {
				if(!visited[next] && board[cur][next] != 0) {
					queue.add(next);
				}
			}
		}
		
	}
	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		
		N = scan.nextInt();
		M = scan.nextInt();
		V = scan.nextInt();
		
		board = new int[M][M];
		
		for(int i=0; i<M; i++) {
			int r = scan.nextInt();
			int c = scan.nextInt();
			board[r][c] = board[c][r] = 1;
		}
		
		bfs(V);
		
		System.out.println(Arrays.deepToString(board));

	}

}
